import java.util.*;

public class oppo {
    public static void main(String[] args) {
        // output should be 4
        int[][] op = { { 0, 2, 1 }, { 1, 2, 0 }, { 1, 0, 0 } };
        int x = 2;
        int y = 2;
        ArrayList<Integer> oi = new ArrayList<>();
        // int x = 2;
        // int y = 2;
        // op = new int[][] { { 0, 2, 0 }, { 0, 0, 1 }, { 1, 1, 1 } };
        // x = 1;
        // y = 1;
        op = new int[][] { { 0, 2, 0 }, { 1, 1, 2 }, { 1, 0, 0 } };
        x = 2;
        y = 1;
        // op = new int[][] {{0, 2, 0}, {0, 0, 1}, {1, 1, 1}};
        // x = 2;
        // y = 1;
        // op = new int[][] { { 0, 2, 0 }, { 1, 2, 1 }, { 1, 1, 1 } };
        // x = 0;
        // y = 2;

        List<List<Integer>> arr = new ArrayList<>();
        for (int i = 0; i < 3; i++) {
            arr.add(new ArrayList<>());
            for (int j = 0; j < 3; j++) {
                arr.get(i).add(op[i][j]);
            }
        }
        // int x = 2;
        // int y = 2;
        System.out.println(minMoves1(arr, x, y));
        // System.out.println(arr);
    }

    static int[][][] dist;
    static int[][] mainarr;
    static int DMX = 1000 * 1000;
    static List<int[]> coinlist;
    static int R;
    static int C;
    static int noofOnes, noofCoins;

    public static boolean isValid(int row, int col) {
        return row >= 0 && row < R && col >= 0 && col < C;
    }

    public static int minimumDistance(int coin, int seq, int row, int col) {
        int res = Integer.MAX_VALUE;
        if (seq == noofOnes)
            return dist[row][col][coin];
        if (mainarr[coin][seq] != -1)
            return mainarr[coin][seq];

        for (int i = 0; i < noofCoins; i++) {
            if ((seq & (1 << i)) == 0) {
                int newSeq = seq | (1 << i);
                int[] pos = coinlist.get(i);
                res = Math.min(res, minimumDistance(i, newSeq, row, col) + dist[pos[0]][pos[1]][coin]);

            }
        }

        mainarr[coin][seq] = res;
        return res;

    }

    static int[] dirRow = { 0, -1, 0, 1 };
    static int[] dirCol = { -1, 0, 1, 0 };

    public static void setDistances(int[][] arr, int coin) {
        for (int r = 0; r < R; r++) {
            for (int c = 0; c < C; c++)
                dist[r][c][coin] = DMX;
        }
        Queue<int[]> que = new LinkedList<>();
        boolean[][] vis = new boolean[R][C];

        int[] stpoint = coinlist.get(coin);
        que.add(stpoint);
        dist[stpoint[0]][stpoint[1]][coin] = 0;
        vis[stpoint[0]][stpoint[1]] = true;
        while (!que.isEmpty()) {
            int[] point = que.poll();
            int oldR = point[0];
            int oldC = point[1];
            for (int k = 0; k < 4; k++) {
                int newR = oldR + dirRow[k];
                int newC = oldC + dirCol[k];
                if (isValid(newR, newC) && !vis[newR][newC] && arr[newR][newC] != 1) {
                    int[] newPoint = { newR, newC };
                    vis[newR][newC] = true;
                    dist[newR][newC][coin] = dist[oldR][oldC][coin] + 1;
                    que.add(newPoint);

                }

            }

        }

    }

    public static int minMoves1(List<List<Integer>> list, int Ra, int Ca) {
        R = list.size();
        C = list.get(0).size();
        int[] startPoint = { 0, 0 };
        coinlist = new ArrayList<>();
        coinlist.add(startPoint);
        int[][] arr = new int[R][C];
        for (int r = 0; r < R; r++) {
            for (int c = 0; c < C; c++) {
                arr[r][c] = list.get(r).get(c);
                if (arr[r][c] == 2) {
                    int[] point = { r, c };
                    coinlist.add(point);
                }
            }
        }
        noofCoins = coinlist.size();
        noofOnes = (1 << noofCoins) - 1;
        int dcol = noofOnes + 1;
        int dow = noofCoins;
        mainarr = new int[dow][dcol];
        for (int i = 0; i < dow; i++) {
            for (int j = 0; j < dcol; j++)
                mainarr[i][j] = -1;
        }

        dist = new int[R][C][noofCoins];
        for (int i = 0; i < noofCoins; i++)
            setDistances(arr, i);

        int ans = minimumDistance(0, 1, Ra, Ca);
        return ans >= DMX ? -1 : ans;

    }
}